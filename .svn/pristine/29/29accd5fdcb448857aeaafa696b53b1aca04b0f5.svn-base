using System;
using System.Collections.Generic;
using System.Drawing;

namespace INDSA_Sem_A.RangeTree
{
    public class RangeTree2D : IRangeTree2D<GraphNode>
    {
        public TreeNode<GraphNode> Root { get; private set; }

        private const int XDimension = 0;
        private const int YDimension = 1;

        public RangeTree2D(IEnumerable<GraphNode> unsortedItems)
        {
            Root = BuildTree(unsortedItems, XDimension);
        }

        public TreeNode<GraphNode> BuildTree(IEnumerable<GraphNode> unsortedItems, int dimension)
        {
            List<GraphNode> graphNodes = new List<GraphNode>(unsortedItems);
           if (dimension == XDimension)
           {
               graphNodes.Sort(new CompareByX());
               return BuildSubTree(graphNodes, dimension);
           }
           else
           {
               graphNodes.Sort(new CompareByY());
               return BuildSubTree(graphNodes, dimension);
           }
        }

        public TreeNode<GraphNode> BuildSubTree(List<GraphNode> sortedItems, int dimension)
        {
            TreeNode<GraphNode> node = new TreeNode<GraphNode>();

         node.Median =   DetermineMedian(sortedItems,dimension);

            if (sortedItems.Count > 1)
            {
                List<GraphNode> leftList;
                List<GraphNode> rightList;
                SplitList(sortedItems, out leftList, out rightList);
                node.LeftChild = BuildSubTree(leftList, dimension);
                node.RightChild = BuildSubTree(rightList, dimension);
          
            }
            else
            {
                node.Value = sortedItems[0]; //list
            }

            if (dimension == XDimension)
            {
               // CompareByY cmpY = new CompareByY();
             //   List<GraphNode> nextDimensionList = new List<GraphNode>(sortedItems);
            //    nextDimensionList.Sort(new CompareByY());
                node.NextDimensionRoot = BuildTree(sortedItems, YDimension);
            }
            return node;
        }

        private int DetermineMedian(List<GraphNode> sortedItems, int dimension)
        {
         //   int index;
            if (dimension == XDimension) //budujeme podle X
            {
                if (sortedItems.Count%2 == 0) //sudy pocet prvku
                {
                    int index1 = sortedItems.Count/2 - 1;
                    int index2 = sortedItems.Count/2;

                    return (sortedItems[index1].Location.X + sortedItems[index2].Location.X)/2;
                }
                else //lichy pocet prvku
                {

                   int index = sortedItems.Count/2;
                    return sortedItems[index].Location.X;
                }
               
            }
            else if (dimension == YDimension) //budujeme podle Y
            {
                if (sortedItems.Count % 2 == 0) //sudy pocet prvku
                {
                    int index1 = sortedItems.Count / 2 - 1;
                    int index2 = sortedItems.Count / 2;

                    return (sortedItems[index1].Location.Y + sortedItems[index2].Location.Y) / 2;
                }
                else //lichy pocet prvku
                {

                    int index = sortedItems.Count / 2;
                    return sortedItems[index].Location.Y;
                }
            }
            else
            {
                throw new Exception("Invalid dimension specifier");
            }
        } //urci median


        private static void SplitList(List<GraphNode> inputList, out List<GraphNode> firstHalf,out List<GraphNode> secondHalf)
        {
            int firstHalfCount = inputList.Count - inputList.Count/2;

            firstHalf = new List<GraphNode>(firstHalfCount);
            secondHalf = new List<GraphNode>(inputList.Count - firstHalfCount);

            int i = 0;

            foreach (var graphNode in inputList)
            {
                if (i < firstHalfCount)
                {
                    firstHalf.Add(graphNode);
                }
                else
                {
                    secondHalf.Add(graphNode);
                }
                i++;
            }
        }
        public List<GraphNode> GetAllInRange(Point start, Point end)
        {
            throw new System.NotImplementedException();
        }


        
 
    }
}