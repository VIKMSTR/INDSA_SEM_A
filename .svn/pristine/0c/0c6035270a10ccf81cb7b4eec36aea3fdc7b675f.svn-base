using System;
using System.Collections.Generic;
using System.Drawing;
using INDSA_Sem_A.Dijkstra;

namespace INDSA_Sem_A
{
    public class Program
    {
         static int Main()
         {

             #region Generator - Incomplete

             Graph g = new Graph();
           /*  for (int i = 0; i < 10; i++)
             {
                 Generator.InsertRandomNode(g);
             }
             */
             #endregion


             #region Inserting Test

             Node n = new Node(NodeType.BusStop, new Point(40, 40));
             g.AddNewNode(n);
             Node n2 = new Node(NodeType.Crossroads, new Point(80, 160));
             Node n3 = new Node(NodeType.RestingPlace, new Point(45, 45));
             g.AddNewNode(n2);
             g.AddNewNode(n3);
             g.AddNewEdge(n, n2);
             g.AddNewEdge(n, n3);
             g.AddNewEdge(n2, n3);
             
             Node n4 = new Node(NodeType.BusStop, new Point(20,20));
             Node n5 = new Node(NodeType.Crossroads, new Point(15,15));
             g.AddNewNode(n4);
             g.AddNewNode(n5);

             g.AddNewEdge(n4,n3);
             g.AddNewEdge(n2,n4);
             g.AddNewEdge(n2,n5);
             g.AddNewEdge(n4,n5);

             /*
            foreach (Follower f in g.FindNode("O3").GetFollowers())
            {
                
                if (f.GetReferencedKey().Equals("Z4"))
                {
                    f.DisableEdge();  
                }
                
            }*/
             g.GetAllNodes();
             Console.WriteLine(g.NumberOfElements());

             #endregion


             #region Priority Queue Test
             // priority queue test
             Dijkstra.PriorityQueue<double, string> priority;
             priority = new PriorityQueue<double, string>();

             foreach (Follower f in n.GetFollowers())
             {
                 double distance = 0.0;
                 string key;
               if(  f.GetFollowingNode(out key, out distance)){
                 priority.Add(new KeyValuePair<double, string>(distance,key));

               }
             }
             Console.WriteLine(priority.Dequeue().Key);

             foreach (Follower f in n3.GetFollowers())
             {
                 double distance = 0.0;
                 string key;
                 if (f.GetFollowingNode(out key, out distance))
                 {
                     priority.Add(new KeyValuePair<double, string>(distance, key));

                 }
             }
             Console.WriteLine(priority.Dequeue().Key); 
             //
             #endregion

             #region Deleting Node Test
            // INode deletedNode = g.RemoveNode(n3.GetId());

          //   Console.WriteLine("Smazan vrchol : " + deletedNode.ToString() + "\n");

          //   g.GetAllNodes();

             #endregion

             #region Test Dijkstra
             DijkstraAlgorithm d = new DijkstraAlgorithm(g);
             List<INode> result;
            result =  d.Execute(n, n5);

             foreach (INode node in result)
             {
                 Console.WriteLine(node.ToString());
             }
     //        Console.WriteLine(result.ToString());
             #endregion

             Console.ReadLine();

             return 0;
         }
    }
}